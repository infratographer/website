{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-,:!=\\[\\]()\"/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Infratographer","text":""},{"location":"#what-is-infratographer","title":"What is Infratographer?","text":"<p>Infratographer is a highly opinionated set of services designed to track information about infrastructure. This includes:</p> <ul> <li>Identity and Permissions</li> <li>Asset Management - coming soon</li> <li>IP Address Management - coming soon</li> <li>More to come!</li> </ul> <p>To learn more about what Infratographer is and where we are going check out the Architecture and Roadmap.</p>"},{"location":"#why-the-name-infratographer","title":"Why the name Infratographer?","text":"<p>The name Infratographer comes from the combination of \"infrastructure\" and \"cartographer\", as the system's mission is to be a source of truth and orchestration layer for all infrastructure. Infratographer provides a GraphQL API to access your infrastructure, allowing you to request specific information and navigate your infrastructure map. Think of it as a set of directions for your infrastructure, helping you to understand and manage the various interconnected components.</p>"},{"location":"#how-do-i-get-started","title":"How do I get started?","text":"<p>The best way to get started is to check out our Development guide.</p> <p>For help getting a development environment setup, check out our Local setup guide.</p>"},{"location":"#how-do-i-contribute","title":"How do I contribute?","text":"<p>We are always looking for contributors! If you are interested in contributing, please check out our Contributing guide. Also, be sure to check out the Code of Conduct for our community. We want to make sure that everyone feels welcome and safe in our community.</p> <p>It would also be a good idea to be familiar with our Project Guidelines before contributing.</p>"},{"location":"#license","title":"License","text":"<p>Infratographer is licensed under the Apache License, Version 2.0.</p>"},{"location":"#contact","title":"Contact","text":"<p>If you have any questions, please feel free to open an issue on GitHub.</p>"},{"location":"community/about/","title":"About us","text":"<p>We are a small team of developers, infrastructure engineers, and hardware geeks who are passionate about infrastructure automation. It's great to have you here!</p>"},{"location":"community/about/#a-note-about-goverance","title":"A note about goverance","text":"<p>This project is lead by a group of software engineers passionate about infrastructure. At this point in the project our focus is on delivering a set of software that represents our collective experience in this space - infrastructure, soups to nuts. There is no formal goverance structure in place at this time. As the project takes shape, and there is an organic growth of contributors and end users, we will revisit this topic.</p>"},{"location":"community/about/#community-meeting","title":"Community Meeting","text":"<p>The community meeting will be held on the Thursday of each odd week at 10:30 am CT on Zoom. This is flexible to the needs of the community and may change in the future.</p> <p>You can expect updates from SIGS, project status, and open discussion. This is the best way to get involved with the project and stay up to date with the latest developments.</p> <p>As the project develops and grows we will seek out tooling to help automate these interaction points and make them more accessible to the community. But for now, we have limited time and resources.</p>"},{"location":"community/about/#mailing-list","title":"Mailing list","text":"<p>We're using Google Groups to manage a mailing list - Infratographer Community</p>"},{"location":"community/code-of-conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"community/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"community/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"community/code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"community/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"community/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders.</p> <p>All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"community/code-of-conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"community/code-of-conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"community/code-of-conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"community/code-of-conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"community/code-of-conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"community/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"community/contributing/","title":"Contributing","text":"<p>Welcome to Infratographer! We're super excited to have you here. This document contains the best practices for contributing to our repositories.</p>"},{"location":"community/contributing/#filing-an-issue","title":"Filing an Issue","text":"<p>If you are using one of our open source projects- you'll likely begin interacting with us by filing an issue. Regardless of whether you think the issue is with the project itself, if you're having trouble using the project, feel free to file an issue on the repo.</p> <p>If you have a feature request, please file an issue before making a PR. Everyone's time is incredibly valuable, so if you have an idea for a feature, please file an issue. This way we can have a discussion with you, and the community, about the design, before you have sunk a bunch of time into developing it.</p> <p>You do not need to file an issue for small fixes. If you are fixing a typo or refactoring a bit of code, you likely don't need to file an issue. This is a judgement call, and sometimes we may review your PR and ask you to file an issue if we expect there are larger design decisions to be made.</p> <p>Each repository has an Issue Template. This helps us make sure that you can give us the most information about your issue upfront, so we can limit the amount of back and forth required before your issue can be resolved. Do your best to fill it out, but if you have trouble, it's ok to file an incomplete issue template.</p>"},{"location":"community/contributing/#making-a-pr","title":"Making a PR","text":"<p>If you are considering filing a pull request, make sure that there's an issue filed for the work you'd like to do. There might be some discussion required! Filing an issue first will help ensure that the work you put into your pull request will get merged.</p> <p>Once your PR is made, it will be labeled needs review. A maintainer will review your PR as soon as they can. The reviewer may ask for changes- they will mark the PR as changes requested and work in progress and will give you details about the requested changes. Feel free to ask lots of questions! The maintainers are there to help you!</p>"},{"location":"community/contributing/#conduct","title":"Conduct","text":"<p>Infratographer follows the Contributor Covenant Code of Conduct. You can find a copy in each of our repositories. Violating the CoC could result in a warning or a ban to any and all repositories in this organization.</p>"},{"location":"community/contributing/#contact","title":"Contact","text":"<p>If you have any questions, please reach out to @nicolerenee or @sfunkhouser</p>"},{"location":"community/project-guidelines/","title":"Project guidelines","text":""},{"location":"community/project-guidelines/#project-naming","title":"Project naming","text":"<p>The Infratographer contributors will be creating a lot of projects. We feel a name says a lot about a project, and first impressions are important. So the contributors will strive to create names that are clear, concise, and approachable.</p> <p>Each project in infratographer will be in it's own git repository. Here are some guidelines for naming repositories:</p> <ul> <li>Don't using words or language that could be offensive to a member of the community. Ongoing violations of this guideline will be handled in accordance with the Code of Conduct. Some examples are:<ul> <li><code>primary</code> or <code>main</code> is preferred over <code>master</code></li> <li><code>allowlist</code> is preferred over <code>whitelist</code></li> <li>This is not exhaustive, but you get the idea.</li> </ul> </li> <li>The name of the repository needs to be clear, not clever.</li> <li>Long names should be perferred over short names.</li> <li>When picking names there should be a leading noun.</li> <li>A verb should be included, although <code>api</code> is acceptable.</li> <li>Nouns should relate to the technical domain of the project. For example:<ul> <li><code>hardware-inventory-api</code> is preferred over <code>filing-cabinet</code>.</li> <li><code>tenant-permissions-reconciler</code> is preferred over <code>permissions-maid</code>.</li> </ul> </li> <li>Avoid creating new TLA's (three letter acronyms), e.g.:<ul> <li><code>loadbalancer-manager-haproxy</code> is preferred over <code>lbm-haproxy</code></li> <li><code>identity-manager-ldap</code> is preferred over <code>idm-ldap</code></li> </ul> </li> <li>The above guideline applies to eTLA's (extended three letter acronyms) </li> <li>If a project is a part of a collection of related projects they should be prefixed similarly. For example:<ul> <li><code>identity-manager-ldap</code> Yup, looks good </li> <li><code>identity-manager-oidc</code> YES! </li> <li><code>kerberos-identity-manager</code>   , something is off here.</li> </ul> </li> </ul> <p>When in doubt, ask for help! The Infratographer ecosystem will be comprised of a bunch of projects, we want those project names to be approachable to our community.</p>"},{"location":"community/project-guidelines/#repository-guidelines","title":"Repository guidelines","text":"<p>In no particular order, these are some things to expect when working with a Infratographer repository:</p> <ul> <li>Use forks for development, not branches on the main repository. This includes contributors with write access to the repository.</li> <li>Each project will maintain and support a <code>dev container</code> and it will be used for local development and CI/CD.</li> <li>Each project will have a <code>Makefile</code> with the following targets:<ul> <li><code>make build</code> - build the project</li> <li><code>make test</code> - run tests</li> <li><code>make lint</code> - run linters</li> <li><code>make clean</code> - clean up the project</li> </ul> </li> <li>Each project should (i.e. are optional but encouraged) have additional targets for development related to specific dependencies, such as:<ul> <li><code>make dev-database</code> -  clean up and run migrations on the development database</li> <li><code>make run-server</code> - run the server</li> </ul> </li> <li>Each project will have a <code>README.md</code> with the following sections:<ul> <li><code>Getting Started</code> - how to get started with the project</li> <li><code>Contributing</code> - how to contribute to the project linking to the website</li> <li><code>Code of Conduct</code> - the code of conduct for the project linking to the website</li> <li><code>License</code> - the license for the project</li> <li><code>Contact</code> - how to contact the project maintainers</li> </ul> </li> <li> <p>Each project will have a <code>docs</code> directory with the following files:</p> <ul> <li> <p><code>development.md</code> - development guidelines for the project</p> </li> <li> <p><code>contributing.md</code> - how to contribute to the project</p> </li> <li><code>code-of-conduct.md</code> - the code of conduct for the project</li> <li>Each project will have a <code>charts</code> directory for Helm charts. Additional deployment artifacts welcome, but Infragrapher Contributors will only support Helm charts.</li> </ul> </li> </ul>"},{"location":"community/project-guidelines/#code-guidelines","title":"Code guidelines","text":"<p>A few guidelines for code and review process. The repetition is intentional:</p> <ul> <li>Don't using words or language that could be offensive to a member of the community. Ongoing violations of this guideline will be handled in accordance with the Code of Conduct. Some examples are:<ul> <li><code>primary</code> or <code>main</code> is preferred over <code>master</code></li> <li><code>allowlist</code> is preferred over <code>whitelist</code></li> <li>This is not exhaustive, but you get the idea.</li> </ul> </li> <li>Each project will have a <code>CODEOWNERS</code> file with the following entries:<ul> <li><code>* @infratographer/&lt;project-name&gt;-maintainers</code></li> </ul> </li> <li>Comments should be used to explain why something is done, not what is done.</li> <li>Comments should should be in plain english, not code. Being a technical project this clearly doesn't imply that the comments should be candidates for a Pulitzer, but the comments should be  language that is approachable to the community.</li> <li>Be mindful of the size of your PRs. If you are making a large change, consider breaking it up into smaller PRs. This will make it easier for reviewers to review your code.</li> <li>Be mindful that not everyone has the same level of experience. If you are making a change that is not obvious, consider adding a comment to explain why the change was made.</li> <li>Assume that if a reviewer is asking for a change that they have the best of intentions. We strive for a welcoming community, and that includes attitudes towards each other on either side of the review process.</li> <li>Assume that if a contributor asks questions about comments that they have the best of intentions.</li> </ul>"},{"location":"community/support/","title":"Support","text":"<p>Please file an issue in the repository you are having trouble with. We will do our best to help you out!</p>"},{"location":"docs/architecture/architecture/","title":"Architecture","text":"<p>Tip</p> <p>Please note that the project is currently in its preliminary stages, and some of the concepts discussed in this documentation may not have been implemented yet or are subject to change. Contact @nicolerenee if you have any questions or would like to know more.</p>"},{"location":"docs/architecture/architecture/#overview","title":"Overview","text":"<p>Infratographer is an infrastructure management system designed to help teams manage and maintain their servers and network devices with ease. The system is built with scalability in mind, allowing teams to manage a single rack of servers or a fleet of servers across multiple locations. In order to support our principle of services being replaceable, we aim to limit communication between services directly, relying instead on events to signal changes to other services and a federated GraphQL API to provide data from multiple services in a single request. By following these principles and utilizing the functionality of Infratographer, teams can streamline their infrastructure management process and increase their productivity.</p>"},{"location":"docs/architecture/architecture/#mission","title":"Mission","text":"<p>The mission of Infratographer is to create a highly opinionated set of services that track the information about all of your infrastructure. We want to be the source of truth and orchestration layer for all of your infrastructure. We accomplish this by building out services that allow you to manage your infrastructure in a cohesive way and providing the ability to extend the functionality that we provide with any additional functionality you need.</p>"},{"location":"docs/architecture/architecture/#architecture-principals","title":"Architecture Principals","text":""},{"location":"docs/architecture/architecture/#services-should-be-replacable","title":"Services should be replacable","text":"<p>To keep the bar of entry into using Infratographer low, we provide the ability to pick and choose the components that you run, as well as the ability to replace services we offer with existing tooling that you have today. For example, Infratographer provides an IP Address Management (IPAM) service, but we recognize that Netbox is a commonly used tool to manage IP addresses. If you want to use Netbox instead of the Infratographer IPAM service, you should be able to do so by building a thin shim service that translates the expected IPAM API to Netbox's API.</p>"},{"location":"docs/architecture/architecture/#communication-between-services-should-be-avoided","title":"Communication between services should be avoided","text":"<p>To support our principal of services being replaceable, we want to limit the interactions between services directly. In traditional infrastructure data, there is often tight coupling of data between object types, such as an IP address being shared by servers, switches, routers, and load balancers. While it may be tempting to make an API call in the server API service to get a server's IP address information to return alongside the server information, this tight coupling can cause issues in a world where components are replaceable or may not exist. Instead, we aim to limit communication between services and rely on events to signal changes to other services. Additionally, we use a federated GraphQL API to provide data from multiple services in a single request, further reducing the need for direct communication between services.</p>"},{"location":"docs/architecture/architecture/#everything-should-be-extensibile","title":"Everything should be Extensibile","text":"<p>To meet the diverse needs of infrastructure deployment, we provide APIs that allow for easy extension of the data managed by Infratographer. We know that everyone has their own opinions on how infrastructure should be deployed and that requirements for infrastructure may differ depending on the use case. By providing APIs for easy extension, users can customize their infrastructure to meet their specific needs.</p>"},{"location":"docs/architecture/architecture/#events-events-and-more-events","title":"Events, events, and more events","text":"<p>To keep services as small and composable as possible, we aim to follow the Unix philosophy of doing one thing well. When an action is taken against a resource, an event representing that action should be created. For example, when an instance is created in the Instance API, an instance creation event will be sent to the message queue, signaling that the instance was created. From there, any downstream services that may care about an instance being created can see this and perform any necessary actions. The prevents Instance API from having code that manages X number of instance types. Instead that logic is moved into individual services that receive a message from the message off the message queue and perform the action.</p>"},{"location":"docs/architecture/architecture/#only-provide-a-base-set-of-providers","title":"Only provide a base set of providers","text":"<p>Infratographer focuses on building a base set of providers and allows the experts and owners of additional systems to create and maintain their own providers. By doing so, Infratographer can remain focused on providing core functionality without dedicating significant resources to maintaining providers for all the different resources available.</p>"},{"location":"docs/architecture/foundational-resources/","title":"Foundational resources","text":"<p>The Infratographer ecosystem is comprised of various services that enable users to manage physical servers, virtual servers, networks, and more. To ensure these services work cohesively, the ecosystem is built with a shared foundation of essential building blocks that make up our foundational resources.</p>"},{"location":"docs/architecture/foundational-resources/#tenants","title":"Tenants","text":"<p>Tenants form the foundation of Infratographer, and multi-tenancy is a core concept of the system from its inception. All resources in Infratographer, except for users, are tied to tenants.</p>  <p>Tenant Structure</p> <pre><code>graph TD\n  A[Sarah Corp]\n  A --&gt; AA[Production]\n  A --&gt; AB[Development]\n\n  B[Nicole Corp]\n\n  C[Freckle Corp]\n  C --&gt; CA[Infrastructure]\n  CA --&gt; CAA[Internal]\n  CA --&gt; CAB[External]\n  C --&gt; CB[Development]</code></pre>  <p>Tenants exist in a tree and multiple root tenants can exist. Root tenants can have any number of tenants under them and subtenants can also have their own subtenants. A root tenant can also have resources on it directly as would be the case with <code>Nicole Corp</code> in the example. All tenants are treated the same and can have resources assigned to them.</p> <p>As shown in the above example, tenants are arranged in a tree structure, with multiple root tenants being possible. Root tenants may have any number of sub-tenants, and each sub-tenant can have its own sub-tenants. All tenants are treated equally and can have resources assigned to them, including root tenants, as is the case with <code>Nicole Corp</code> in the example.</p> <p>Read more about tenancy in our tenancy docs.</p>"},{"location":"docs/architecture/foundational-resources/#users","title":"Users","text":"<p>While not considered a foundation of the system, users are a unique resource that exist outside of the tenant structure in Infratographer. It is worth highlighting this fact to emphasize their uniqueness in the system.</p> <p>When a user makes their first successfully authenticated request, a new user resource is created which provices a unique ID to represent the user throughtout Infratographer.</p> <p>After being created, a user can be granted access to a tenant, which allows them to perform operations and access resources within that tenant and all its sub-tenants. Users can be granted access to one or more tenants, as needed, and can be managed through the permissions APIs provided by Infratographer.</p> <p>Read more about users and authentication in our identity docs.</p>"},{"location":"docs/architecture/foundational-resources/#locations","title":"Locations","text":"<p>Locations in Infratographer are used as a representation of an environment in which resources can be deployed. They differ from physical facilities or other concrete places and serve as a way to represent regions, availability zones, and other logical location based groupings of resources.</p> <p>Resources created within Infratographer are associated with a single location to indicate where they should be provisioned. For example, if you have data centers in New York, Los Angeles, S\u00e3o Paulo, London, Paris, and Hong Kong, you might have a \"Global\" location that includes all of the data centers, as well as locations called \"North America Region\", \"South America Region\", \"Europe Region\", and \"Asia Region\". You could also have locations that represent availability zones within a data center, such as \"S\u00e3o Paulo - Zone 1\" and \"S\u00e3o Paulo - Zone 2\".</p> <p>Locations are not stored in Infratographer as a tree, even though the user's implementation will likely resemble a tree. This is because storing them as a tree would imply that there is a relationship between them for sharing resources, which might not always be the case. For example, provisioning a load balancer in the \"Global\" location doesn't necessarily mean it's available in the locations under it. It simply means it runs in what you call your \"Global\" region, which may or may not includes all of the data centers you have.</p> <p>It's important to note that creating a load balancer in a specific location does not mean it is available in sub-locations. For example, if the \"Global\" location includes all data centers, creating a load balancer in New York does not automatically make it available in the \"Global\" location. Instead, you would need to create the load balancer in the \"Global\" location or in a location that is a direct child of the \"Global\" location.</p>"},{"location":"docs/architecture/foundational-resources/#resource-providers","title":"Resource Providers","text":"<p>Resource providers play a critical role in Infratographer's architecture by managing the provisioning, management, and lifecycle of resources. When you create an instance that needs to be provisioned on a physical server, an instance provider will facilitate this process. The instance provider uses a resource providers to request access to additional tenants.</p> <p>The Instance API and the Load Balancer API manage instance providers and load balancer providers, respectively. However, the resource provider representation of them is managed by the Resource Provider API. Although there isn't a way to request a list of every resource of a given type, the \"Foo\" load balancer provider needs to access a list of every load balancer it is responsible for provisioning. To enable this, we require an easy way to indicate which locations the \"Foo\" load balancer provider is available in. We also need to ensure that this information is accessible to other tenants.</p>  <p>Resource Provider ER Diagram</p> <pre><code>erDiagram\n  Tenant-100 ||--|{ Location-LA : \"belongs to\"\n  Tenant-100 ||--|{ Location-NY : \"belongs to\"\n  Tenant-100 ||--|{ LB-Provider-Foo : \"belongs to\"\n  Tenant-100 ||--|{ Resource-Provider-LoadBalancers : \"belongs to\"\n  LB-Provider-Foo }|--|| Resource-Provider-LoadBalancers : \"uses\"\n  LB-Provider-Bar }|--|| Resource-Provider-LoadBalancers : \"uses\"\n\n  Tenant-100 ||--|{ Tenant-200 : \"sub tenant\"\n  Resource-Provider-LoadBalancers |o--o| Location-NY : \"available\"\n  Tenant-200 |o--o| Location-NY : \"available\"\n  Tenant-200 |o--o| Resource-Provider-LoadBalancers : \"available\"\n  Tenant-200 |o--o| Resource-Provider-LoadBalancers : \"authorized\"</code></pre>  <p>To clarify the resource provider's role, we provide an example ER diagram. In this scenario, Tenant-100 has created Location-LA, Location-NY, LB-Provider-Foo, LB-Provider-Bar, and Resource-Provider-LoadBalancers. Both LB-Provider-Foo and LB-Provider-Bar use Resource-Provider-LoadBalancers to interact with tenants. Additionally, Tenant-100 has a sub-tenant of Tenant-200. Tenant-100 has marked Location-NY and Resource-Provider-LoadBalancers \"available\" for Tenant-200. Tenant-100 has also marked Resource-Provider-LoadBalancers as being available in \"Location-NY\".</p> <p>Tenant-200 then authorized Resource-Provider-LoadBalancers. Tenants can complete the authorizion for all of their sub-tenants or only for their direct tenant. Once this was completed, the resource provider was granted permissions to Tenant-200. In this example, since it's a load balancer provider, Resource-Provider-LoadBalancers is configured to request all scopes to load balancer resources as well as read access to network scopes and instance scopes. As a result, Resource-Provider-LoadBalancers read network and instance information and perform any actions against the load balancers in the tenant.</p>"},{"location":"docs/architecture/foundational-resources/#metadata","title":"Metadata","text":"<p>Danger</p> <p>This section is incomplete.</p>  <p>All resources can have metadata.</p> <p>Metadata provides:</p> <ul> <li>annotations</li> <li>statuses</li> <li>finalizers</li> </ul> <p>Heavily influenced by the K8s metadata spec.</p>"},{"location":"docs/architecture/roadmap/","title":"Roadmap","text":"<p>We have a rough draft of the roadmap available as a GitHub Gist. Keep in mind that the roadmap is still a work in progress and subject to change as we continue to develop the system. You can check out the Gist here. If you have any questions or feedback, feel free to reach out to @nicolerenee.</p>"},{"location":"docs/development/guide/","title":"Development guidelines","text":""},{"location":"docs/development/guide/#development-environment","title":"Development environment","text":"<p>Infratographer projects will use dev containers for local development. This will ensure that all contributors are using the same development environment. This will also ensure that the development environment is portable and can be used in CI/CD.</p> <p>Contributors can use the dev container locally through an editor or the command line. For more information on how to use dev containers. the goal is to create the local environment not dictate a specific tool. Well, other than <code>docker</code> or <code>docker-compose</code> . Priority should be given equally to both the in-editor experience and the command-line experience.</p>"},{"location":"docs/development/guide/#development-tools","title":"Development tools","text":"<p>Infratographer is (largely) a Golang-based project, however. this may change as the project grows. However, there are some preexisting tool choices that we will use for the time being:</p> <ul> <li><code>make</code> is used for running tasks in the repository.</li> <li>CockroachDB is the defacto database.</li> <li>Authzed/SpiceDB for authentication.</li> <li>Nats is the message queueing system.</li> <li>Kubernetes as a deployment platform.</li> <li><code>docker</code> and <code>docker-compose</code> for local development and CI/CD runtime.</li> </ul> <p>These tools are not set in stone and may change as the project grows. However, we will try to avoid changing these tools unless absolutely necessary.</p>"},{"location":"docs/development/guide/#development-workflow","title":"Development workflow","text":"<p>The development workflow is as follows:</p> <ul> <li>Fork the repository</li> <li>Do some changes</li> <li>Create a pull request</li> <li>Iterate on feedback</li> <li>Celebrate when the pull request is merged </li> </ul>"},{"location":"docs/development/guide/#cicd","title":"CI/CD","text":"<p>Infratographer projects will use GitHub Actions for CI/CD. This allows contributors to run tests on their forks without requiring maintainer involvement. It also enables us to automate builds, tests, and releases based on various triggers, such as pull requests, tags, or commits to specific branches.</p> <p>We aim to have a fast and reliable CI/CD pipeline that helps us catch issues early and enables us to release changes with confidence. We will continuously improve and iterate on our CI/CD setup as the project evolves and new requirements emerge.</p>"},{"location":"docs/development/local-setup/","title":"Local setup guide","text":"<p>This guide will walk you through setting up your local development environment. This guide assumes that you have a basic understanding of how to use the command line and a basic understanding of git.</p>"},{"location":"docs/development/local-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker</li> <li>Docker Compose</li> <li>dev container</li> <li>Git</li> </ul>"},{"location":"docs/development/local-setup/#setup","title":"Setup","text":"<p>There are two ways to set up your local development environment. Both supported methods are based on dev container. The first method is a GUI-driven method using VS Code + Remote Containers. The second method is a command-line-driven method using SSH.</p>"},{"location":"docs/development/local-setup/#1-vs-code-remote-containers-beginner","title":"1. VS Code + Remote Containers (Beginner)","text":"<p>Steps can be found in the VS Code + Remote Containers guide.</p>"},{"location":"docs/development/local-setup/#2-ssh-advanced","title":"2. SSH (Advanced)","text":"<p>Steps can be found in the SSH + Dev Containers guide.</p>"},{"location":"docs/development/local-setup/ssh/","title":"SSH + Dev Containers","text":"<p>Using SSH is a command-line-driven method for setting up your local development environment. This method is great for those who are comfortable with the command line and want to use emacs, for example,  as their editor. This method is a little more advanced and might require some additional setup.</p>"},{"location":"docs/development/local-setup/ssh/#dev-container-docker-settings","title":"dev container + docker settings","text":"<ol> <li>Ensure the <code>sshd</code> feature is enabled in the dev container.</li> <li>Port forward the <code>sshd</code> port to your local machine in the docker-compose.yml</li> <li>Mount your authorized keys into the dev container in the docker-compose.yml</li> <li>Ensure <code>~/.ssh</code> is owned by the <code>vscode</code> user in the Dockerfile.</li> </ol>"},{"location":"docs/development/local-setup/ssh/#manually-setting-up-ssh-agent-forwarding","title":"Manually setting up SSH agent forwarding","text":"<p>The provided dev container listens for SSH connections on port 2222 and bind mounts <code>~/.ssh/authorized_keys</code> from the host to facilitate SSH. In order to perform Git operations (i.e., committing code in the container), you will need to enable SSH agent forwarding from your machine to the dev container. While VS Code handles this automatically, for other editors you will need to set this up manually.</p> <p>To do so, update your <code>~/.ssh/config</code> to support agent forwarding. The following config snippet should accomplish this for you:</p> <pre><code>Host losthost\n  HostName localhost\n  Port 2222\n  User vscode\n  ForwardAgent yes\n</code></pre> <p>Now to connect to the dev container, you can use the following command:</p> <pre><code>ssh localhost\n</code></pre>"},{"location":"docs/development/local-setup/ssh/#additional-setup","title":"Additional setup","text":"<p>The goal of this project is to use <code>dev containers</code> as the primary environment for local development. There are several examples using <code>vim</code> and several of its variants, along with <code>emacs</code>. This is considered the advanced approach to local development, and your mileage may vary. It's expected that you would need to modify these examples to suit your needs.</p>"},{"location":"docs/development/local-setup/vs-code/","title":"VS Code + Remote Containers","text":"<p>Using VS Code + Remote Containers is a GUI-driven method for setting up your local development environment. This method is considered the easiest way to get started with local development. This method is great for those who are new to the command line and want to use VS Code as their editor.</p>"},{"location":"docs/development/local-setup/vs-code/#installation","title":"Installation","text":"<ol> <li>Install VS Code</li> <li>Install the Remote - Containers extension</li> <li>Open the project in VS Code</li> <li>Click the button in the lower-left corner of the window that says \"Reopen in Container\"</li> <li>Wait for the container to build and start</li> </ol>"},{"location":"docs/development/local-setup/vs-code/#additional-setup","title":"Additional setup","text":""},{"location":"docs/development/local-setup/vs-code/#dotfiles","title":"dotfiles","text":"<p>Many developers rely on aliases and other shell configurations to make their lives easier. If you want to use these aliases in your dev container, you can reference the VS Code documentation about Personalizing with dotfiles</p>"},{"location":"docs/development/local-setup/vs-code/#vs-code-extensions","title":"VS Code extensions","text":"<p>If you want to use VS Code extensions in your dev container, you can reference the VS Code documentation about Using extensions with a dev container. Not every extension is related to the project, and some would be considered personal preferences, these should be installed this way.</p>"},{"location":"docs/identity-and-access-management/identity/","title":"Identity","text":""},{"location":"docs/identity-and-access-management/identity/#scope","title":"Scope","text":"<p>An identity is a collection of verifiable claims one makes about oneself. In the context of the Infratographer ecosystem, identity primarily focuses on validating the claims a subject makes about their identity, where a subject is a human user, a machine, or any other entity that can be uniquely identified.</p>"},{"location":"docs/identity-and-access-management/identity/#principles-of-identity","title":"Principles of Identity","text":""},{"location":"docs/identity-and-access-management/identity/#infratographer-does-not-manage-identities","title":"Infratographer does not manage identities","text":"<p>Infratographer makes no assertions about what a subject is beyond their ability to present valid tokens to services and the format of those tokens. Identity management functionality - such as profile updates, password resets, and so on - is not included in the Infratographer ecosystem.</p>"},{"location":"docs/identity-and-access-management/identity/#rationale","title":"Rationale","text":"<p>Organizations often have their own identity management lifecycles and leverage external solutions for managing their users, service accounts, and other identifiable subjects. Rather than implement this functionality and require reconciliation of state between upstream identity providers and Infratographer services, it is easier to instead leverage open standards to connect identity management services to the Infratographer ecosystem.</p>"},{"location":"docs/identity-and-access-management/identity/#implications","title":"Implications","text":"<p>Any deployment of Infratographer requires an external identity management solution. Additionally, because there is no identity management service in Infratographer, services must assume that any valid token they receive represents an existing subject in an active state.</p>"},{"location":"docs/identity-and-access-management/identity/#identity-is-conveyed-through-jwts-and-well-formed-urns","title":"Identity is conveyed through JWTs and well-formed URNs","text":"<p>As an alternative to identity management, services authenticate subjects using JWTs from a known issuer as security tokens. Subject identifiers are conveyed using URNs in the <code>infratographer</code> namespace in JWT claims.</p>"},{"location":"docs/identity-and-access-management/identity/#rationale_1","title":"Rationale","text":"<p>Open standards allow for more composability of components within the Infratographer ecosystem. An administrator deploying Infratographer can choose to leverage the default suite of services for authentication or bring their own, provided they issue well-formed JWT access tokens.</p>"},{"location":"docs/identity-and-access-management/identity/#implications_1","title":"Implications","text":"<p>JWTs issued to services must conform to existing specifications for Infratographer access tokens. These tokens must also contain sufficient information to make authorization decisions about subjects attempting to perform actions. Tokens should also be short-lived to prevent replay attacks.</p>"},{"location":"docs/identity-and-access-management/identity/#identities-are-bound-to-issuers","title":"Identities are bound to issuers","text":"<p>A subject's identity provider is considered to be part of their identity. For example, if a user has the email address <code>foo@example.com</code> and is registered with two OIDC providers <code>https://auth.example.com</code> and <code>https://internal.example.com</code>, they should present with two separate identities with unique subject URNs depending on the method of authentication used.</p>"},{"location":"docs/identity-and-access-management/identity/#rationale_2","title":"Rationale","text":"<p>When presented with two valid tokens from different identity providers, many services rely on best-effort attempts to understand when those two identities correspond to the same subject (e.g., merging subject records based on email address). This process is inherently risky and makes it difficult to implement features such as authorization policies based on the subject's originating identity provider. Rather than try to guess when one subject is the same as another, it is easier to instead consider subjects as unique based on the combination of their identity provider and internal subject ID.</p>"},{"location":"docs/identity-and-access-management/identity/#implications_2","title":"Implications","text":"<p>Authorization is granted to subjects on the basis of the identity provider they authenticate against in addition to their subject identifier. There is no relationship between a subject from one identity provider and a subject from another, even if they share all of the same profile information and identifying credentials.</p>"},{"location":"docs/identity-and-access-management/identity/#all-services-trust-a-single-source-of-identities","title":"All services trust a single source of identities","text":"<p>Within a given Infratographer deployment, all services must trust the same issuer for access tokens they consume.</p>"},{"location":"docs/identity-and-access-management/identity/#rationale_3","title":"Rationale","text":"<p>Trusting a single issuer ensures that subjects have a single, stable identifier when accessing services. Additionally, configuring services to accept access tokens from multiple issuers increases the complexity of a given deployment without a marked improvement in security or reliability.</p>"},{"location":"docs/identity-and-access-management/identity/#implications_3","title":"Implications","text":"<p>In cases where tokens from multiple issuers must be accepted, methods based on open standards such as OAuth 2.0 token exchange should be used instead.</p>"},{"location":"docs/identity-and-access-management/tenancy/","title":"Tenancy","text":""},{"location":"docs/identity-and-access-management/tenancy/#scope","title":"Scope","text":"<p>Tenancy is the concept of providing isolated access to resources. In the context of the Infratographer ecosystem, we are talking about the isolation of data and the ability to provide a single application to multiple tenants. The scope of this document is to provide a shared understanding and a working model for developing multi-tenant applications within the Infratographer ecosystem. It is outside the scope to discuss multi-tenancy in other systems beyond Infratographer except where drawing comparison helps to clarify our intent.</p>"},{"location":"docs/identity-and-access-management/tenancy/#principles-of-tenancy","title":"Principles of Tenancy","text":""},{"location":"docs/identity-and-access-management/tenancy/#tenant-trees-are-isolated","title":"Tenant Trees are Isolated","text":"<p>Tenants provide isolated access to data. Access to data within a tenant tree needs to be explicitly granted.</p>"},{"location":"docs/identity-and-access-management/tenancy/#rationale","title":"Rationale","text":"<p>Tenant isolation limits access privileges to data and control over resources managed by the ecosystem.</p>"},{"location":"docs/identity-and-access-management/tenancy/#implications","title":"Implications","text":"<p>Access to a parent tenant is not implied by granting access to a child tenant and access to one tenant does not imply access to other unrelated tenant trees. Access granted to a parent tenant does imply granting access to child tenants</p>"},{"location":"docs/identity-and-access-management/tenancy/#tenant-permissions-are-inherited","title":"Tenant permissions are inherited","text":"<p>Access granted on a tenant will be inherited by all subtenants.</p>"},{"location":"docs/identity-and-access-management/tenancy/#rationale_1","title":"Rationale","text":"<p>Inheriting access rights from the parent is more intuitive and fits better into existing authorization paradigms.</p>"},{"location":"docs/identity-and-access-management/tenancy/#implication","title":"Implication","text":"<p>When access is granted to a tenant, that access will be granted to all subtenants of the tenant at the same level. Access cannot be limited to only one level unless the tenant has no children. In some cases, a flat tenant structure may be better serve isolation requirements.</p>"},{"location":"docs/identity-and-access-management/tenancy/#tenants-are-hierarchical","title":"Tenants are Hierarchical","text":"<p>Tenants form a tree structure, and are not limited to a single level.</p>"},{"location":"docs/identity-and-access-management/tenancy/#rationale_2","title":"Rationale","text":"<p>Experience with multiple large projects (Openstack[1], Kubernetes[2], etc) has shown that many ecosystems start with single level tenancy and then migrate to hierarchical tenancy in the future. This migration is often fraught with peril, bugs and dragons. Other systems like GCP provide hierarchical multi-tenancy using tree structures. In GCP the tree structure is very clear and is represented by the organization, folders, and projects [3].</p>"},{"location":"docs/identity-and-access-management/tenancy/#implications_1","title":"Implications","text":"<p>Tenants can have sub-tenants that can have sub-tenants, etc. Recursion needs to be accounted for in services built for the Infratographer ecosystem.</p>"},{"location":"docs/identity-and-access-management/tenancy/#services-in-the-ecosystem-are-multi-tenant","title":"Services in the ecosystem are Multi-Tenant","text":"<p>Services and applications in the Infratographer ecosystem will need to interact with multiple tenants. This will be done securely and with awareness.</p>"},{"location":"docs/identity-and-access-management/tenancy/#rationale_3","title":"Rationale","text":"<p>To support multitenancy, ecosystem services need to be tenant aware or have an instance deployed for every tenant. The former is preferable to the later.</p>"},{"location":"docs/identity-and-access-management/tenancy/#implications_2","title":"Implications","text":"<p>The services that form the Infratographer ecosystem are aware of the tenants and provide the means of segmenting resources owned by those tenants. This allows for a single application to be provided to multiple tenants. Resource segmentation must be explicit.</p>"},{"location":"docs/identity-and-access-management/tenancy/#resources-are-owned-by-tenants","title":"Resources are owned by Tenants","text":"<p>All resources are owned by a single tenant, not multiple tenants.</p>"},{"location":"docs/identity-and-access-management/tenancy/#rationale_4","title":"Rationale","text":"<p>Granular access control will provide for a more secure environment. Identities can be given access to individual resources or tenants. Tracking an arbitrary number of tenants for a resource adds unecessary complexity.</p>"},{"location":"docs/identity-and-access-management/tenancy/#implications_3","title":"Implications","text":"<p>Services in the Infratographer ecosystem must track a single tenant association for each resource they manage. Tenants and subtenants have no differences other than subtenants have a parent tenant. Drawing a distinction between these entities leads to complications when needing to apply \"global\" (or at least for a whole tree) authorization constructs and quota management</p>"},{"location":"docs/identity-and-access-management/tenancy/#references","title":"References","text":"<p>Much of the inspiration for this doc came the documentation written in this repo.</p> <p>[1] https://youtu.be/KvKiAzKSVYs [2] https://youtu.be/j5x6NumP21c [3] https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy</p>"}]}